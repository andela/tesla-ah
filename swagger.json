{
  "swagger": "2.0",
  "info": {
    "version": "2",
    "title": "Tesla-AH",
    "description": "Create a community of like minded authors to foster inspiration and innovation by leveraging the modern web."
  },
  "host": "localhost:3000",
  "basePath": "/api",
  "tags": [
    {
      "name": "auth",
      "description": " User Authentication "
    },
    {
      "name": "article",
      "description": " Articles "
    },
    {
      "name": "profile",
      "description": " User profile "
    },
    {
      "name": "follow",
      "description": " User should be able to follow and unfollow each other."
    }
  ],
  "schemes": ["http", "https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "definitions": {
    "user": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "gender": {
          "type": "M"
        },
        "dateOfBirth": {
          "type": "string"
        }
      }
    },
    "signup": {
      "required": [
        "firstName",
        "lastName",
        "email",
        "username",
        "password",
        "confirmPassword"
      ],
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "confirmPassword": {
          "type": "string"
        }
      }
    },
    "article": {
      "required": ["title", "description", "body", "tagList"],
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "tagList": {
          "type": "string",
          "example": "reactJs, AngularJs, NodeJs"
        }
      }
    },
    "requestPasswordReset": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "ericrukundo005@gmail.com"
        }
      }
    },
    "login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "ericrukundo005@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "eric@12345"
        }
      }
    },
    "comment": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "example": "This is a comment"
        }
      }
    },
    "description": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "example": "This is the description or the reason why article is blocked."
        }
      }
    }
  },
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": ["auth"],
        "description": "User is able to create an account",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User create a new account",
            "schema": {
              "$ref": "#/definitions/signup"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": " User Account created successfully",
            "schema": {
              "$ref": "#/definitions/signup"
            }
          }
        }
      }
    },
    "/api/user": {
      "put": {
        "tags": ["profile"],
        "description": "User profile update",
        "parameters": [
          {
            "name": "token",
            "in": "Headers",
            "description": "Client authentication token",
            "required": true
          },
          {
            "name": "user",
            "in": "Body",
            "description": "Object containing user information to update",
            "schema": "#/definitions/user"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "User profile sucessfully updated"
          },
          "404": {
            "description": "User profile not found"
          },
          "500": {
            "description": "Error while updating profile"
          }
        }
      }
    },
    "/profiles/{username}": {
      "get": {
        "tags": ["profile"],
        "description": "Get user profile",
        "parameters": [
          {
            "name": "token",
            "in": "Headers",
            "description": "Client authentication token",
            "required": false
          },
          {
            "name": "username",
            "in": "path",
            "description": "Username of user to get",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "User profile returned"
          },
          "404": {
            "description": "User profile not found"
          },
          "500": {
            "description": "Error while fetching profile"
          }
        }
      }
    },
    "/auth/signout": {
      "get": {
        "tags": ["auth"],
        "description": "User is able to signout from the system when she/he is logged in by blacklisting the Token ",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "The user token",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "You are now signed Out!"
          },
          "401": {
            "description": " You are not Authorised to blacklist this token "
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/articles": {
      "post": {
        "tags": ["article"],
        "description": "user should be able to create an article",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "The user token",
            "required": true
          },
          {
            "name": "Article",
            "in": "body",
            "description": "create an article on author's haven",
            "schema": {
              "$ref": "#/definitions/article"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Article created successfully",
            "schema": {
              "$ref": "#/definitions/article"
            }
          }
        }
      },
      "get": {
        "tags": ["article"],
        "description": "user should be able to view all articles",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Articles fetched successfully"
          }
        }
      }
    },
    "/articles/{slug}": {
      "get": {
        "tags": ["article"],
        "description": "user should be able to view a specific slug",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "The article's slug",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Single Article fetched successfully"
          }
        }
      },
      "put": {
        "tags": ["article"],
        "description": "user should be able to update his/her own article - slug",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "The user token",
            "required": true
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The article's slug",
            "required": true
          },
          {
            "name": "Article",
            "in": "body",
            "description": "update your own article on author's haven",
            "schema": {
              "$ref": "#/definitions/article"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Article updated successfully",
            "schema": {
              "$ref": "#/definitions/article"
            }
          }
        }
      },
      "delete": {
        "tags": ["article"],
        "description": "user should be able to delete a specific slug",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "The user token",
            "required": true
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The article's slug",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Article deleted successfully!"
          }
        }
      }
    },
    "/articles/{slug}/like": {
      "post": {
        "tags": ["article"],
        "description": "User should be able to like an article",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "The user token",
            "required": true
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Article slug",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Article liked successfully"
          },
          "403": {
            "description": "Article already liked"
          }
        }
      }
    },
    "/articles/{slug}/dislike": {
      "post": {
        "tags": ["article"],
        "description": "User should be able to dislike an article",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "The user token",
            "required": true
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Article slug",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Article disliked successfully"
          },
          "403": {
            "description": "Article already disliked"
          }
        }
      }
    },
    "/ratings/articles/:slug": {
      "post": {
        "tags": ["article"],
        "description": "User is able to view ratings report on a specific article",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "example": "This_is_andela_2433546h34",
            "description": "Authentication key",
            "required": true,
            "type": "string"
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Article slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "report": {
                      "type": "object",
                      "properties": {
                        "1st": {
                          "type": "integer",
                          "example": 1
                        },
                        "2st": {
                          "type": "integer",
                          "example": 4
                        },
                        "3st": {
                          "type": "integer",
                          "example": 3
                        },
                        "4st": {
                          "type": "integer",
                          "example": 1
                        },
                        "5st": {
                          "type": "integer",
                          "example": 5
                        },
                        "Number of User": {
                          "type": "integer",
                          "example": 1
                        },
                        "Total Ratings": {
                          "type": "integer",
                          "example": 1
                        },
                        "Average": {
                          "type": "integer",
                          "example": 1
                        }
                      }
                    },
                    "percentage": {
                      "type": "object",
                      "properties": {
                        "1st": {
                          "type": "string",
                          "example": "10%"
                        },
                        "2st": {
                          "type": "string",
                          "example": "0%"
                        },
                        "3st": {
                          "type": "string",
                          "example": "0%"
                        },
                        "4st": {
                          "type": "string",
                          "example": "30%"
                        },
                        "5st": {
                          "type": "string",
                          "example": "60%"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No rating found for specific article",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "string",
                      "example": "No any rating found for that article"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["auth"],
        "description": "User is able to login",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "string",
                      "example": "User logged in successful"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NDU3LCJmaXJzdE5hbWUiOiJFcmljIiwibGFzdE5hbWUiOiJQcmVzdGVpbiIsInVzZXJuYW1lIjoiZXJpY3ByZXN0ZWluIiwiZW1haWwiOiJncHJlc3RlaW4wNTVAZ21haWwuY29tIiwicGFzc3dvcmQiOiIkMmIkMDgkemlUU3RqL0piU2NWb2M3R2tTaksxT1VqalgyNnh3UnBWSUdTeC9QVDVpUXBoeXduVFJSRkMiLCJiaW8iOiJuYW4iLCJpbWFnZSI6Im5hbiIsImRhdGVPZkJpcnRoIjoiMjAxOS0wNi0xN1QxMzo0MDozMi4yODJaIiwiZ2VuZGVyIjoibWFsZSIsInByb3ZpZGVyIjoibmFuIiwic29jaWFsSWQiOiIzNDM0MzQzIiwidmVyaWZpZWQiOnRydWUsImNyZWF0ZWRBdCI6IjIwMTktMDYtMTdUMTM6NDA6MzIuMjgyWiIsInVwZGF0ZWRBdCI6IjIwMTktMDYtMTdUMTM6NDA6MzIuMjgyWiIsImlhdCI6MTU2MDc3ODg0OCwiZXhwIjoxNTYwOTUxNjQ4fQ.uLQmiZZ0u7TQYYAkvb9_XjhBQp88xJbSb_84Bt9BfRw"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Inputs",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "string",
                      "example": "child email fails because [email must be a valid email]"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "string",
                      "example": "User with that email does not exist"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset": {
      "post": {
        "tags": ["auth"],
        "description": "User is able to request password reset",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requestPasswordReset"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "string",
                      "example": "Reset link sent to your email <gprestein055@gmail.com>"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Inputs",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "string",
                      "example": "child email fails because [email must be a valid email]"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset/:token": {
      "get": {
        "tags": ["auth"],
        "description": "When user click on Reset Button on his/her email, Reset link will be generated.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": {
                    "message": "Below is your reset link",
                    "link": "http://localhost:3000/auth/reset/eyJhbGciOiJIUzI1NiIsInR5cCI6IpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTU1OTg5NDQ1OCwiZXhwIjoxNTYwMDY3MjU4fQ.yLEX1WeDAwcjVzvag5guJGz-GmzwecVUOZYVYyeYajM"
                  }
                }
              }
            }
          },
          "304": {
            "description": "Invalid or Expired token",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 304
                },
                "error": {
                  "type": "object",
                  "example": {
                    "message": "token is invalid or expired"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset/:aprvToken": {
      "patch": {
        "tags": ["auth"],
        "description": "User is able to apply password reset and change his or her password",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "aprvToken",
            "in": "path",
            "description": "Token key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "example": {
                    "message": "Password changed successful"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or Expired token",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "error": {
                  "type": "object",
                  "example": {
                    "message": "child newpassword fails because [newpassword length must be at least 8 characters long]"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/articles/{slug}/comments": {
      "post": {
        "tags": ["comment"],
        "description": "User is able to add a comment on an article",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Client authentication token",
            "required": true
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Article slug",
            "required": true
          },
          {
            "name": "comment",
            "in": "body",
            "required": true,
            "description": "User comments an article",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Dear ..., Thank you for contributing to this article",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        }
      },
      "get": {
        "tags": ["comment"],
        "description": "User is able to get an article with its comments",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "Article slug",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {}
        }
      }
    },
    "/articles/{slug}/comments/{commentId}": {
      "post": {
        "tags": ["comment"],
        "description": "User is able to comment a comment",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Client authentication token",
            "required": true
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Article slug",
            "required": true
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The comment Id",
            "required": true
          },
          {
            "name": "comment",
            "in": "body",
            "required": true,
            "description": "User comments a comment",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Dear ..., Thank you for contributing to this comment",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        }
      }
    },
    "/articles/comments/{commentId}": {
      "patch": {
        "tags": ["comment"],
        "description": "User is able to edit a comment",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Client authentication token",
            "required": true
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The comment Id",
            "required": true
          },
          {
            "name": "comment",
            "in": "body",
            "required": true,
            "description": "User edits a comment",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Your comment has been edited",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        }
      },
      "delete": {
        "tags": ["comment"],
        "description": "User is able to delete a comment",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Client authentication token",
            "required": true
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The comment Id",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Comment deleted!"
          }
        }
      }
    },
    "/articles/comments/{commentId}/dislike": {
      "post": {
        "tags": ["comment"],
        "description": "User should be able to dislike a comment",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "The user token",
            "required": true
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Comment Id",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Dear ..., Thank you for disliking this comment"
          },
          "403": {
            "description": "Dear ..., You have already disliked this comment!"
          }
        }
      }
    },
    "/articles/comments/{commentId}/like": {
      "post": {
        "tags": ["comment"],
        "description": "User should be able to like a comment",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "The user token",
            "required": true
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Comment Id",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Dear ..., Thank you for liking this comment"
          },
          "403": {
            "description": "Dear ..., You have already liked this comment!"
          }
        }
      }
    },
    "/articles/comments/{commentId}/dislikes": {
      "get": {
        "tags": ["comment"],
        "description": "Authors Haven visitors and users should be able see all dislikes on a comment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "Comment Id",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {}
        }
      }
    },
    "/articles/comments/{commentId}/history": {
      "get": {
        "tags": [
          "comment"
        ],
        "description": "Authors Haven users should be able see all track their comments edit history",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "The user token",
            "required": true
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Comment Id",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {}
        }
      }
    },
    "/articles/comments/{commentId}/likes": {
      "get": {
        "tags": [
          "comment"
        ],
        "description": "Authors Haven visitors and users should be able to see all likes on a comment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "Comment Id",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {}
        }
      }
    },
    "/profiles":{
      "get": {
        "tags": ["profile"],
        "description": "Any User will be able to view a list of User's Profiles",
        "parameters": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "the list of All User's profile has been successfully fetched"
          }
        }
      }
    },
    "/profiles/:username/follow": {
      "patch": {
        "tags": ["follow"],
        "description": "User should be able to follow other users",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "follow",
            "in": "path",
            "description": "Token key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": {
                    "message": "Congratulation, now you followed the person"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or Expired token",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "error": {
                  "type": "object",
                  "example": {
                    "message": "you already follow this person"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profiles/:username/unfollow": {
      "patch": {
        "tags": ["follow"],
        "description": "User should be able to unfollow other users",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "unfollow",
            "in": "path",
            "description": "Token key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": {
                    "message": " you unfollowed the person"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or Expired token",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "error": {
                  "type": "object",
                  "example": {
                    "message": "you do not follow this person"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profiles/:username/following": {
      "get": {
        "tags": ["follow"],
        "description": "User should be able to fetch all users he or she follows",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "following",
            "in": "path",
            "description": "Token key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": {
                    "message": " these are the people you follow"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or Expired token",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "error": {
                  "type": "object",
                  "example": {
                    "message": "you do not follow any person"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profiles/:username/followers": {
      "get": {
        "tags": ["follow"],
        "description": "User should be able to fetch all users who follow him or her",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "followers",
            "in": "path",
            "description": "Token key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": {
                    "message": " these are the people you follow"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or Expired token",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "error": {
                  "type": "object",
                  "example": {
                    "message": "you do not follow any person"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/articles/:slug/report": {
      "post": {
        "tags": ["article"],
        "description": "User is able to report an article",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token key",
            "required": true,
            "type": "string"
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Article slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "2"
                    },
                    "slug": {
                      "type": "string",
                      "example": "73H7812"
                    },
                    "comment": {
                      "type": "string",
                      "example": "some thing"
                    },
                    "username": {
                      "type": "string",
                      "example": "ericprestein"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2019-06-24T12:05:20.116Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2019-06-24T12:05:20.116Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Inputs",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "string",
                      "example": "The comment is required and should have at least 3 letters!"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "string",
                      "example": "The article does not exist!!!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/articles/:slug/block": {
      "post": {
        "tags": ["article"],
        "description": "Super admin or moderator are able to block the article",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token key",
            "required": true,
            "type": "string"
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Article slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/description"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message":{
                      "type": "object",
                      "example": "Article blocked successfully"
                    },
                    "response": {
                     "type": "object",
                     "properties":{
                      "id": {
                        "type": "integer",
                        "example": "2"
                      },
                      "reporterId": {
                        "type": "integer",
                        "example": 5
                      },
                      "articleId": {
                        "type": "integer",
                        "example": 3
                      },
                      "authorId": {
                        "type": "integer",
                        "example": 2
                      },
                      "moderatorId": {
                        "type": "integer",
                        "example": 6
                      },
                      "blockedDay": {
                        "type": "string",
                        "example": "Thursday"
                      },
                      "createdAt": {
                        "type": "string",
                        "example": "2019-06-24T12:05:20.116Z"
                      },
                      "updatedAt": {
                        "type": "string",
                        "example": "2019-06-24T12:05:20.116Z"
                      }
                    }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Inputs",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "string",
                      "example": "The description is required and should have at least 3 letters!"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "string",
                      "example": "The article does not exist!!!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/articles/:slug/unblock": {
      "post": {
        "tags": ["article"],
        "description": "Super admin or moderator are able to unblock the article",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token key",
            "required": true,
            "type": "string"
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Article slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Article unblocked successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unblock an article which is not blocked",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "string",
                      "example": "The article you are trying to unblock is not blocked."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "string",
                      "example": "The article does not exist!!!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/articles?author={author}": {
      "get": {
        "tags": ["Search for an article"],
        "description": "AAny User will be able to view a list of all articles which matches with the provided parameter",
        "parameters": [
          {
            "name": "author",
            "in": "path",
            "description": "Author's Username",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "The List of All Articles related to the provided author's Username"
          }
        }
      }
    },
    "/articles?tag={tag}": {
      "get": {
        "tags": ["Search for an article"],
        "description": "Any User will be able to view a list of all articles which matches with the provided parameter",
        "parameters": [
          {
            "name": "tag",
            "in": "path",
            "description": "article's tag",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "The List of All Articles related to the provided tag"
          }
        }
      }
    },
    "/articles?title={title}": {
      "get": {
        "tags": ["Search for an article"],
        "description": "Any User will be able to view a list of all articles which matches with the provided parameter",
        "parameters": [
          {
            "name": "title",
            "in": "path",
            "description": "article's title",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "The List of All Articles related to the provided title"
          }
        }
      }
    },
    "/articles?keywords={keywords}": {
      "get": {
        "tags": ["Search for an article"],
        "description": "Any User will be able to view a list of all articles which matches with the provided parameter",
        "parameters": [
          {
            "name": "keywords",
            "in": "path",
            "description": "article's title",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "The List of All Articles related to the provided keywords"
          }
        }
      }
    }
  }
}