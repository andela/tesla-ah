{
  "swagger":"2.0",
  "info":{
      "version":"2",
      "title":"Tesla-AH",
      "description":"Create a community of like minded authors to foster inspiration and innovation by leveraging the modern web."
  },
  "host":"localhost:3000",
  "basePath": "/api/",
  "tags": [
    {
      "name": "auth",
      "description": " User Authentication "
    }
  ],
  "schemes":[
      "http",
      "https"
  ],
   "consumes":[
       "application/json"
   ],
   "produces":[
       "application/json"
   ],
   "definitions": {
    "user": {
      "type": "object",
      "properties": {
          "firstName": {
              "type": "string"
          },
          "lastName": {
              "type": "string"
          },
          "username": {
              "type": "string"
          },
          "email": {
              "type": "string"
          },
          "password": {
              "type": "string"
          },
          "bio": {
              "type": "string"
          },
          "image": {
              "type": "string"
          },
          "gender": {
              "type": "M"
          },
          "dateOfBirth": {
              "type": "string"
          }
      }
    },
    "signup": {
      "required": [
        "firstName",
        "lastName",
        "email",
        "username",
        "password",
        "confirmPassword"
      ],
      "properties": {
        "firstName": {
            "type": "string"
        },
        "lastName": {
            "type": "string"
        },
        "email": {
            "type": "string"
        },
        "username": {
            "type": "string"
        },
        "password": {
            "type": "string"
        },
        "confirmPassword": {
            "type": "string"
        }
      }
    },
    "article": {
      "required": ["title", "description", "body", "tagList"],
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "tagList": {
          "type": "string",
          "example": "reactJs, AngularJs, NodeJs"
        }
      }
    },
    "requestPasswordReset": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "ericrukundo005@gmail.com" }
      }
    }
  },
  "paths": {
    "/api/auth/signup": {
      "post": {
        "tags": ["auth"],
        "description": "User is able to create an account",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User create a new account",
            "schema": {
              "$ref": "#/definitions/signup"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": " User Account created successfully",
            "schema": {
              "$ref": "#/definitions/signup"
            }
          }
        }
      }
    },
    "/api/user": {
      "put": {
        "tags": [
          "Update User Profile"
        ],
        "description": "User profile update",
        "parameters": [
          {
            "name": "token",
            "in": "Headers",
            "description": "Client authentication token",
            "required": true
          },
          {
            "name": "user",
            "in": "Body",
            "description": "Object containing user information to update",
            "schema": "#/definitions/user"
          }
        ],
        "produces":[
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User profile sucessfully updated"
          },
          "404": {
            "description": "User profile not found"
          },
          "500": {
            "description": "Error while updating profile"
          }
        }
      }
    },
    "/api/profiles/{username}": {
      "get": {
        "tags": [
          "Profile"
        ],
        "description": "Get user profile",
        "parameters": [
          {
            "name": "token",
            "in": "Headers",
            "description": "Client authentication token",
            "required": false
          },
          {
            "name": "username",
            "in": "path",
            "description": "Username of user to get",
            "required": true
          }
        ],
        "produces":[
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User profile returned"
          },
          "404": {
            "description": "User profile not found"
          },
          "500": {
            "description": "Error while fetching profile"
          }
        }
      }
    },
    "/api/auth/signout": {
      "get": {
        "tags": ["auth"],
        "description": "User is able to signout from the system when she/he is logged in by blacklisting the Token ",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "The user token",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "You are now signed Out!"
          },
          "401": {
            "description": " You are not Authorised to blacklist this token "
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/articles": {
      "post": {
        "tags": ["Articles Endpoints"],
        "description": "user should be able to create an article",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "The user token",
            "required": true
          },
          {
            "name": "Article",
            "in": "body",
            "description": "create an article on author's haven",
            "schema": {
              "$ref": "#/definitions/article"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Article created successfully",
            "schema": {
              "$ref": "#/definitions/article"
            }
          }
        }
      },
      "get": {
        "tags": ["Articles Endpoints"],
        "description": "user should be able to view all articles",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Articles fetched successfully"
          }
        }
      }
    },
    "/api/articles/{slug}": {
      "get": {
        "tags": ["Get a single Article's slug "],
        "description": "user should be able to view a specific slug",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "The article's slug",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Single Article fetched successfully"
          }
        }
      },
      "put": {
        "tags": ["Update a single Article's slug "],
        "description": "user should be able to update his/her own article - slug",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "The user token",
            "required": true
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The article's slug",
            "required": true
          },
          {
            "name": "Article",
            "in": "body",
            "description": "update your own article on author's haven",
            "schema": {
              "$ref": "#/definitions/article"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Article updated successfully",
            "schema": {
              "$ref": "#/definitions/article"
            }
          }
        }
      },
      "delete": {
        "tags": ["Delete a single Article's slug "],
        "description": "user should be able to view a specific slug",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "The user token",
            "required": true
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The article's slug",
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Article deleted successfully!"
          }
        }
      }
    },
    "/auth/reset": {
      "post": {
        "tags": ["auth"],
        "description": "User is able to request password reset",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requestPasswordReset"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "string",
                      "example": "Reset link sent to your email <gprestein055@gmail.com>"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Inputs",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "string",
                      "example": "child email fails because [email must be a valid email]"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset/:token": {
      "get": {
        "tags": ["auth"],
        "description": "When user click on Reset Button on his/her email, Reset link will be generated.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": {
                    "message": "Below is your reset link",
                    "link": "http://localhost:3000/auth/reset/eyJhbGciOiJIUzI1NiIsInR5cCI6IpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTU1OTg5NDQ1OCwiZXhwIjoxNTYwMDY3MjU4fQ.yLEX1WeDAwcjVzvag5guJGz-GmzwecVUOZYVYyeYajM"
                  }
                }
              }
            }
          },
          "304": {
            "description": "Invalid or Expired token",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 304
                },
                "error": {
                  "type": "object",
                  "example": {
                    "message": "token is invalid or expired"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset/:aprvToken": {
      "patch": {
        "tags": ["auth"],
        "description": "User is able to apply password reset and change his or her password",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "aprvToken",
            "in": "path",
            "description": "Token key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "example": {
                    "message": "Password changed successful"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or Expired token",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "error": {
                  "type": "object",
                  "example": {
                    "message": "child newpassword fails because [newpassword length must be at least 8 characters long]"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}